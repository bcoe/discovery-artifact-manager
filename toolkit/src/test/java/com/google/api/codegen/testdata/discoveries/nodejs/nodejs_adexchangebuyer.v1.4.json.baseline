
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id
    id: 0,  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.accounts.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.accounts.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id
    id: 0,  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.accounts.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id
    id: 0,  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.accounts.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id.
    accountId: 0,  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.billingInfo.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.billingInfo.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to get the budget information for.
    accountId: '0',  // TODO: Update placeholder value.

    // The billing id to get the budget information for.
    billingId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.budget.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id associated with the budget being updated.
    accountId: '0',  // TODO: Update placeholder value.

    // The billing id associated with the budget being updated.
    billingId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.budget.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id associated with the budget being updated.
    accountId: '0',  // TODO: Update placeholder value.

    // The billing id associated with the budget being updated.
    billingId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.budget.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The id for the account that will serve this creative.
    accountId: 0,  // TODO: Update placeholder value.

    // The buyer-specific id for this creative.
    buyerCreativeId: 'my-buyer-creative-id',  // TODO: Update placeholder value.

    // The id of the deal id to associate with this creative.
    dealId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await adexchangebuyer.creatives.addDeal(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The id for the account that will serve this creative.
    accountId: 0,  // TODO: Update placeholder value.

    // The buyer-specific id for this creative.
    buyerCreativeId: 'my-buyer-creative-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.creatives.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.creatives.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await adexchangebuyer.creatives.list(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The id for the account that will serve this creative.
    accountId: 0,  // TODO: Update placeholder value.

    // The buyer-specific id for this creative.
    buyerCreativeId: 'my-buyer-creative-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.creatives.listDeals(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The id for the account that will serve this creative.
    accountId: 0,  // TODO: Update placeholder value.

    // The buyer-specific id for this creative.
    buyerCreativeId: 'my-buyer-creative-id',  // TODO: Update placeholder value.

    // The id of the deal id to disassociate with this creative.
    dealId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await adexchangebuyer.creatives.removeDeal(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposalId to delete deals from.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.marketplacedeals.delete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // proposalId for which deals need to be added.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.marketplacedeals.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
    // the URL.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.marketplacedeals.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposalId to edit deals on.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.marketplacedeals.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposalId to add notes for.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.marketplacenotes.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
    // the URL.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.marketplacenotes.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The private auction id to be updated.
    privateAuctionId: 'my-private-auction-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    await adexchangebuyer.marketplaceprivateauction.updateproposal(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to get the reports.
    accountId: '0',  // TODO: Update placeholder value.

    // The end time of the report in ISO 8601 timestamp format using UTC.
    endDateTime: '',  // TODO: Update placeholder value.

    // The start time of the report in ISO 8601 timestamp format using UTC.
    startDateTime: '',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.performanceReport.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to delete the pretargeting config for.
    accountId: '0',  // TODO: Update placeholder value.

    // The specific id of the configuration to delete.
    configId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await adexchangebuyer.pretargetingConfig.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to get the pretargeting config for.
    accountId: '0',  // TODO: Update placeholder value.

    // The specific id of the configuration to retrieve.
    configId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.pretargetingConfig.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to insert the pretargeting config for.
    accountId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.pretargetingConfig.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to get the pretargeting configs for.
    accountId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.pretargetingConfig.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to update the pretargeting config for.
    accountId: '0',  // TODO: Update placeholder value.

    // The specific id of the configuration to update.
    configId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.pretargetingConfig.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The account id to update the pretargeting config for.
    accountId: '0',  // TODO: Update placeholder value.

    // The specific id of the configuration to update.
    configId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.pretargetingConfig.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The id for the product to get the head revision for.
    productId: 'my-product-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.products.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.products.search(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // Id of the proposal to retrieve.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.proposals.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.proposals.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposal id to update.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    // The last known revision number to update. If the head revision in the marketplace database has
    // since changed, an error will be thrown. The caller should then fetch the latest proposal at head
    // revision and retry the update at that revision.
    revisionNumber: '0',  // TODO: Update placeholder value.

    // The proposed action to take on the proposal. This field is required and it must be set when
    // updating a proposal.
    updateAction: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.proposals.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.proposals.search(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposal id for which the setup is complete
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await adexchangebuyer.proposals.setupcomplete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The proposal id to update.
    proposalId: 'my-proposal-id',  // TODO: Update placeholder value.

    // The last known revision number to update. If the head revision in the marketplace database has
    // since changed, an error will be thrown. The caller should then fetch the latest proposal at head
    // revision and retry the update at that revision.
    revisionNumber: '0',  // TODO: Update placeholder value.

    // The proposed action to take on the proposal. This field is required and it must be set when
    // updating a proposal.
    updateAction: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.proposals.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const adexchangebuyer = google.adexchangebuyer('v1.4');

async function main () {
  const authClient = await authorize();
  const request = {
    // The accountId of the publisher to get profiles for.
    accountId: 0,  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await adexchangebuyer.pubprofiles.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
