
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the application to get. Example: apps/myapp.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Resource name for the location.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    locationsId: 'my-locations-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.locations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. The resource that owns the locations collection, if applicable.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await appengine.apps.locations.list(request)).data;
    const locationsPage = response.locations;
    if (locationsPage) {
      for (let i = 0; i < locationsPage.length; i++) {
        // TODO: Change code below to process each resource in `locationsPage`:
        console.log(JSON.stringify(locationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. The name of the operation resource.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    operationsId: 'my-operations-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.operations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. The name of the operation collection.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await appengine.apps.operations.list(request)).data;
    const operationsPage = response.operations;
    if (operationsPage) {
      for (let i = 0; i < operationsPage.length; i++) {
        // TODO: Change code below to process each resource in `operationsPage`:
        console.log(JSON.stringify(operationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the Application resource to update. Example: apps/myapp.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.delete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example: apps/myapp.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await appengine.apps.services.list(request)).data;
    const servicesPage = response.services;
    if (servicesPage) {
      for (let i = 0; i < servicesPage.length; i++) {
        // TODO: Change code below to process each resource in `servicesPage`:
        console.log(JSON.stringify(servicesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource to update. Example: apps/myapp/services/default.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.versions.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    versionsId: 'my-versions-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.versions.delete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    versionsId: 'my-versions-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.versions.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example:
    // apps/myapp/services/default/versions/v1/instances/instance-1.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    versionsId: 'my-versions-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    instancesId: 'my-instances-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.versions.instances.debug(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. For example:
    // "apps/myapp/services/default/versions/v1/instances/instance-1".
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    versionsId: 'my-versions-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    instancesId: 'my-instances-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.versions.instances.delete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example:
    // apps/myapp/services/default/versions/v1/instances/instance-1.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    versionsId: 'my-versions-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    instancesId: 'my-instances-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.versions.instances.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    versionsId: 'my-versions-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await appengine.apps.services.versions.instances.list(request)).data;
    const instancesPage = response.instances;
    if (instancesPage) {
      for (let i = 0; i < instancesPage.length; i++) {
        // TODO: Change code below to process each resource in `instancesPage`:
        console.log(JSON.stringify(instancesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await appengine.apps.services.versions.list(request)).data;
    const versionsPage = response.versions;
    if (versionsPage) {
      for (let i = 0; i < versionsPage.length; i++) {
        // TODO: Change code below to process each resource in `versionsPage`:
        console.log(JSON.stringify(versionsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const appengine = google.appengine('v1beta5');

async function main () {
  const authClient = await authorize();
  const request = {
    // Part of `name`. Name of the resource to update. Example: apps/myapp/services/default/versions/1.
    appsId: 'my-apps-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    servicesId: 'my-services-id',  // TODO: Update placeholder value.

    // Part of `name`. See documentation of `appsId`.
    versionsId: 'my-versions-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await appengine.apps.services.versions.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
