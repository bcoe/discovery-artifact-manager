
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the dataset being deleted
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of dataset being deleted
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await bigquery.datasets.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the requested dataset
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the requested dataset
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await bigquery.datasets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the new dataset
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.datasets.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the datasets to be listed
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await bigquery.datasets.list(request)).data;
    const datasetsPage = response.datasets;
    if (datasetsPage) {
      for (let i = 0; i < datasetsPage.length; i++) {
        // TODO: Change code below to process each resource in `datasetsPage`:
        console.log(JSON.stringify(datasetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the dataset being updated
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the dataset being updated
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.datasets.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the dataset being updated
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the dataset being updated
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.datasets.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // [Required] Project ID of the job to cancel
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // [Required] Job ID of the job to cancel
    jobId: 'my-job-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await bigquery.jobs.cancel(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // [Required] Project ID of the requested job
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // [Required] Job ID of the requested job
    jobId: 'my-job-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await bigquery.jobs.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // [Required] Project ID of the query job
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // [Required] Job ID of the query job
    jobId: 'my-job-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.pageToken) {
      request.pageToken = response.pageToken;
    }
    response = (await bigquery.jobs.getQueryResults(request)).data;
    const errorsPage = response.errors;
    if (errorsPage) {
      for (let i = 0; i < errorsPage.length; i++) {
        // TODO: Change code below to process each resource in `errorsPage`:
        console.log(JSON.stringify(errorsPage[i], null, 2));
      }
    }
  } while (response.pageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the project that will be billed for the job
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    media: {
      // TODO: Add desired media content for upload. See
      // https://github.com/google/google-api-nodejs-client#media-uploads
      mimeType: '',  // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
      body: '',
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.jobs.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the jobs to list
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await bigquery.jobs.list(request)).data;
    const jobsPage = response.jobs;
    if (jobsPage) {
      for (let i = 0; i < jobsPage.length; i++) {
        // TODO: Change code below to process each resource in `jobsPage`:
        console.log(JSON.stringify(jobsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the project billed for the query
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.jobs.query(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await bigquery.projects.list(request)).data;
    const projectsPage = response.projects;
    if (projectsPage) {
      for (let i = 0; i < projectsPage.length; i++) {
        // TODO: Change code below to process each resource in `projectsPage`:
        console.log(JSON.stringify(projectsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the destination table.
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the destination table.
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    // Table ID of the destination table.
    tableId: 'my-table-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.tabledata.insertAll(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the table to read
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the table to read
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    // Table ID of the table to read
    tableId: 'my-table-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.pageToken) {
      request.pageToken = response.pageToken;
    }
    response = (await bigquery.tabledata.list(request)).data;
    const rowsPage = response.rows;
    if (rowsPage) {
      for (let i = 0; i < rowsPage.length; i++) {
        // TODO: Change code below to process each resource in `rowsPage`:
        console.log(JSON.stringify(rowsPage[i], null, 2));
      }
    }
  } while (response.pageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the table to delete
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the table to delete
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    // Table ID of the table to delete
    tableId: 'my-table-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await bigquery.tables.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the requested table
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the requested table
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    // Table ID of the requested table
    tableId: 'my-table-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await bigquery.tables.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the new table
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the new table
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.tables.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the tables to list
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the tables to list
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await bigquery.tables.list(request)).data;
    const tablesPage = response.tables;
    if (tablesPage) {
      for (let i = 0; i < tablesPage.length; i++) {
        // TODO: Change code below to process each resource in `tablesPage`:
        console.log(JSON.stringify(tablesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the table to update
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the table to update
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    // Table ID of the table to update
    tableId: 'my-table-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.tables.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const bigquery = google.bigquery('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID of the table to update
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // Dataset ID of the table to update
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    // Table ID of the table to update
    tableId: 'my-table-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await bigquery.tables.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
