
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const cloudmonitoring = google.cloudmonitoring('v2beta2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project id. The value can be the numeric project ID or string-based project name.
    project: 'my-project',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await cloudmonitoring.metricDescriptors.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const cloudmonitoring = google.cloudmonitoring('v2beta2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID to which the metric belongs.
    project: 'my-project',  // TODO: Update placeholder value.

    // Name of the metric.
    metric: 'my-metric',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await cloudmonitoring.metricDescriptors.delete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const cloudmonitoring = google.cloudmonitoring('v2beta2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project id. The value can be the numeric project ID or string-based project name.
    project: 'my-project',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await cloudmonitoring.metricDescriptors.list(request)).data;
    const metricsPage = response.metrics;
    if (metricsPage) {
      for (let i = 0; i < metricsPage.length; i++) {
        // TODO: Change code below to process each resource in `metricsPage`:
        console.log(JSON.stringify(metricsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const cloudmonitoring = google.cloudmonitoring('v2beta2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    metric: 'my-metric',  // TODO: Update placeholder value.

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    youngest: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await cloudmonitoring.timeseries.list(request)).data;
    const timeseriesPage = response.timeseries;
    if (timeseriesPage) {
      for (let i = 0; i < timeseriesPage.length; i++) {
        // TODO: Change code below to process each resource in `timeseriesPage`:
        console.log(JSON.stringify(timeseriesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const cloudmonitoring = google.cloudmonitoring('v2beta2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID. The value can be the numeric project ID or string-based project name.
    project: 'my-project',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await cloudmonitoring.timeseries.write(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const cloudmonitoring = google.cloudmonitoring('v2beta2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    metric: 'my-metric',  // TODO: Update placeholder value.

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    youngest: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await cloudmonitoring.timeseriesDescriptors.list(request)).data;
    const timeseriesPage = response.timeseries;
    if (timeseriesPage) {
      for (let i = 0; i < timeseriesPage.length; i++) {
        // TODO: Change code below to process each resource in `timeseriesPage`:
        console.log(JSON.stringify(timeseriesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
