
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.cancelPreview(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.delete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // Name of the resource for this request.
    resource_: 'my-resource',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.getIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await deploymentmanager.deployments.list(request)).data;
    const deploymentsPage = response.deployments;
    if (deploymentsPage) {
      for (let i = 0; i < deploymentsPage.length; i++) {
        // TODO: Change code below to process each resource in `deploymentsPage`:
        console.log(JSON.stringify(deploymentsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // Name of the resource for this request.
    resource_: 'my-resource',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.setIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.stop(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // Project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // Name of the resource for this request.
    resource_: 'my-resource',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.testIamPermissions(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.deployments.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    // The name of the manifest for this request.
    manifest: 'my-manifest',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.manifests.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await deploymentmanager.manifests.list(request)).data;
    const manifestsPage = response.manifests;
    if (manifestsPage) {
      for (let i = 0; i < manifestsPage.length; i++) {
        // TODO: Change code below to process each resource in `manifestsPage`:
        console.log(JSON.stringify(manifestsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the operation for this request.
    operation: 'my-operation',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.operations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await deploymentmanager.operations.list(request)).data;
    const operationsPage = response.operations;
    if (operationsPage) {
      for (let i = 0; i < operationsPage.length; i++) {
        // TODO: Change code below to process each resource in `operationsPage`:
        console.log(JSON.stringify(operationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    // The name of the resource for this request.
    resource_: 'my-resource',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await deploymentmanager.resources.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    deployment: 'my-deployment',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await deploymentmanager.resources.list(request)).data;
    const resourcesPage = response.resources;
    if (resourcesPage) {
      for (let i = 0; i < resourcesPage.length; i++) {
        // TODO: Change code below to process each resource in `resourcesPage`:
        console.log(JSON.stringify(resourcesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const deploymentmanager = google.deploymentmanager('v2');

async function main () {
  const authClient = await authorize();
  const request = {
    // The project ID for this request.
    project: 'my-project',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await deploymentmanager.types.list(request)).data;
    const typesPage = response.types;
    if (typesPage) {
      for (let i = 0; i < typesPage.length; i++) {
        // TODO: Change code below to process each resource in `typesPage`:
        console.log(JSON.stringify(typesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
