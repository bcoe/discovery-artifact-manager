
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account ID.
    summaryAccountId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountActiveAdSummaries.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account permission group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountPermissionGroups.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountPermissionGroups.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account permission ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountPermissions.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountPermissions.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User profile ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountUserProfiles.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountUserProfiles.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.accountUserProfiles.list(request)).data;
    const accountUserProfilesPage = response.accountUserProfiles;
    if (accountUserProfilesPage) {
      for (let i = 0; i < accountUserProfilesPage.length; i++) {
        // TODO: Change code below to process each resource in `accountUserProfilesPage`:
        console.log(JSON.stringify(accountUserProfilesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User profile ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountUserProfiles.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accountUserProfiles.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accounts.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.accounts.list(request)).data;
    const accountsPage = response.accounts;
    if (accountsPage) {
      for (let i = 0; i < accountsPage.length; i++) {
        // TODO: Change code below to process each resource in `accountsPage`:
        console.log(JSON.stringify(accountsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accounts.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.accounts.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Ad ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.ads.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.ads.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.ads.list(request)).data;
    const adsPage = response.ads;
    if (adsPage) {
      for (let i = 0; i < adsPage.length; i++) {
        // TODO: Change code below to process each resource in `adsPage`:
        console.log(JSON.stringify(adsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Ad ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.ads.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.ads.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.advertiserGroups.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertiserGroups.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertiserGroups.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.advertiserGroups.list(request)).data;
    const advertiserGroupsPage = response.advertiserGroups;
    if (advertiserGroupsPage) {
      for (let i = 0; i < advertiserGroupsPage.length; i++) {
        // TODO: Change code below to process each resource in `advertiserGroupsPage`:
        console.log(JSON.stringify(advertiserGroupsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertiserGroups.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertiserGroups.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertisers.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertisers.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.advertisers.list(request)).data;
    const advertisersPage = response.advertisers;
    if (advertisersPage) {
      for (let i = 0; i < advertisersPage.length; i++) {
        // TODO: Change code below to process each resource in `advertisersPage`:
        console.log(JSON.stringify(advertisersPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertisers.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.advertisers.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.browsers.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID in this association.
    campaignId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.campaignCreativeAssociations.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID in this association.
    campaignId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.campaignCreativeAssociations.list(request)).data;
    const campaignCreativeAssociationsPage = response.campaignCreativeAssociations;
    if (campaignCreativeAssociationsPage) {
      for (let i = 0; i < campaignCreativeAssociationsPage.length; i++) {
        // TODO: Change code below to process each resource in `campaignCreativeAssociationsPage`:
        console.log(JSON.stringify(campaignCreativeAssociationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.campaigns.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Default landing page name for this new campaign. Must be less than 256 characters long.
    defaultLandingPageName: '',  // TODO: Update placeholder value.

    // Default landing page URL for this new campaign.
    defaultLandingPageUrl: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.campaigns.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.campaigns.list(request)).data;
    const campaignsPage = response.campaigns;
    if (campaignsPage) {
      for (let i = 0; i < campaignsPage.length; i++) {
        // TODO: Change code below to process each resource in `campaignsPage`:
        console.log(JSON.stringify(campaignsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.campaigns.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.campaigns.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Change log ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.changeLogs.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.changeLogs.list(request)).data;
    const changeLogsPage = response.changeLogs;
    if (changeLogsPage) {
      for (let i = 0; i < changeLogsPage.length; i++) {
        // TODO: Change code below to process each resource in `changeLogsPage`:
        console.log(JSON.stringify(changeLogsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.cities.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Connection type ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.connectionTypes.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.connectionTypes.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Content category ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.contentCategories.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Content category ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.contentCategories.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.contentCategories.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.contentCategories.list(request)).data;
    const contentCategoriesPage = response.contentCategories;
    if (contentCategoriesPage) {
      for (let i = 0; i < contentCategoriesPage.length; i++) {
        // TODO: Change code below to process each resource in `contentCategoriesPage`:
        console.log(JSON.stringify(contentCategoriesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Content category ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.contentCategories.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.contentCategories.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.conversions.batchinsert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/ddmconversions'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Country DART ID.
    dartId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.countries.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.countries.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser ID of this creative. This is a required field.
    advertiserId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    media: {
      // TODO: Add desired media content for upload. See
      // https://github.com/google/google-api-nodejs-client#media-uploads
      mimeType: '',  // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
      body: '',
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeAssets.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    // Creative Field Value ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.creativeFieldValues.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    // Creative Field Value ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFieldValues.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFieldValues.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.creativeFieldValues.list(request)).data;
    const creativeFieldValuesPage = response.creativeFieldValues;
    if (creativeFieldValuesPage) {
      for (let i = 0; i < creativeFieldValuesPage.length; i++) {
        // TODO: Change code below to process each resource in `creativeFieldValuesPage`:
        console.log(JSON.stringify(creativeFieldValuesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    // Creative Field Value ID
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFieldValues.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFieldValues.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative Field ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.creativeFields.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative Field ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFields.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFields.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.creativeFields.list(request)).data;
    const creativeFieldsPage = response.creativeFields;
    if (creativeFieldsPage) {
      for (let i = 0; i < creativeFieldsPage.length; i++) {
        // TODO: Change code below to process each resource in `creativeFieldsPage`:
        console.log(JSON.stringify(creativeFieldsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative Field ID
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFields.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeFields.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeGroups.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeGroups.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.creativeGroups.list(request)).data;
    const creativeGroupsPage = response.creativeGroups;
    if (creativeGroupsPage) {
      for (let i = 0; i < creativeGroupsPage.length; i++) {
        // TODO: Change code below to process each resource in `creativeGroupsPage`:
        console.log(JSON.stringify(creativeGroupsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeGroups.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creativeGroups.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creatives.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creatives.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.creatives.list(request)).data;
    const creativesPage = response.creatives;
    if (creativesPage) {
      for (let i = 0; i < creativesPage.length; i++) {
        // TODO: Change code below to process each resource in `creativesPage`:
        console.log(JSON.stringify(creativesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creatives.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.creatives.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.dimensionValues.query(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Directory site contact ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.directorySiteContacts.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.directorySiteContacts.list(request)).data;
    const directorySiteContactsPage = response.directorySiteContacts;
    if (directorySiteContactsPage) {
      for (let i = 0; i < directorySiteContactsPage.length; i++) {
        // TODO: Change code below to process each resource in `directorySiteContactsPage`:
        console.log(JSON.stringify(directorySiteContactsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Directory site ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.directorySites.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.directorySites.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.directorySites.list(request)).data;
    const directorySitesPage = response.directorySites;
    if (directorySitesPage) {
      for (let i = 0; i < directorySitesPage.length; i++) {
        // TODO: Change code below to process each resource in `directorySitesPage`:
        console.log(JSON.stringify(directorySitesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // ID of the object of this dynamic targeting key. This is a required field.
    objectId: '0',  // TODO: Update placeholder value.

    // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
    // and cannot contain commas. All characters are converted to lowercase.
    name: '',  // TODO: Update placeholder value.

    // Type of the object of this dynamic targeting key. This is a required field.
    objectType: '',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.dynamicTargetingKeys.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.dynamicTargetingKeys.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.dynamicTargetingKeys.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Event tag ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.eventTags.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Event tag ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.eventTags.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.eventTags.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.eventTags.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Event tag ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.eventTags.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.eventTags.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    // The ID of the report file.
    fileId: '0',  // TODO: Update placeholder value.

    // TODO: To download media content, use:
    //
    // alt: 'media',

    auth: authClient,
  };

  try {
    const response = (await dfareporting.files.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.files.list(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.floodlightActivities.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivities.generatetag(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivities.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivities.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.floodlightActivities.list(request)).data;
    const floodlightActivitiesPage = response.floodlightActivities;
    if (floodlightActivitiesPage) {
      for (let i = 0; i < floodlightActivitiesPage.length; i++) {
        // TODO: Change code below to process each resource in `floodlightActivitiesPage`:
        console.log(JSON.stringify(floodlightActivitiesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivities.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivities.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity Group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivityGroups.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivityGroups.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.floodlightActivityGroups.list(request)).data;
    const floodlightActivityGroupsPage = response.floodlightActivityGroups;
    if (floodlightActivityGroupsPage) {
      for (let i = 0; i < floodlightActivityGroupsPage.length; i++) {
        // TODO: Change code below to process each resource in `floodlightActivityGroupsPage`:
        console.log(JSON.stringify(floodlightActivityGroupsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity Group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivityGroups.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightActivityGroups.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight configuration ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightConfigurations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightConfigurations.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight configuration ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightConfigurations.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.floodlightConfigurations.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    // Inventory item ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.inventoryItems.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.inventoryItems.list(request)).data;
    const inventoryItemsPage = response.inventoryItems;
    if (inventoryItemsPage) {
      for (let i = 0; i < inventoryItemsPage.length; i++) {
        // TODO: Change code below to process each resource in `inventoryItemsPage`:
        console.log(JSON.stringify(inventoryItemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    // Landing page ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.landingPages.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    // Landing page ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.landingPages.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.landingPages.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.landingPages.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    // Landing page ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.landingPages.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.landingPages.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.languages.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.metros.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Mobile carrier ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.mobileCarriers.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.mobileCarriers.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Operating system version ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.operatingSystemVersions.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.operatingSystemVersions.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Operating system DART ID.
    dartId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.operatingSystems.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.operatingSystems.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    // Order document ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.orderDocuments.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.orderDocuments.list(request)).data;
    const orderDocumentsPage = response.orderDocuments;
    if (orderDocumentsPage) {
      for (let i = 0; i < orderDocumentsPage.length; i++) {
        // TODO: Change code below to process each resource in `orderDocumentsPage`:
        console.log(JSON.stringify(orderDocumentsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for orders.
    projectId: '0',  // TODO: Update placeholder value.

    // Order ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.orders.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for orders.
    projectId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.orders.list(request)).data;
    const ordersPage = response.orders;
    if (ordersPage) {
      for (let i = 0; i < ordersPage.length; i++) {
        // TODO: Change code below to process each resource in `ordersPage`:
        console.log(JSON.stringify(ordersPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementGroups.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementGroups.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.placementGroups.list(request)).data;
    const placementGroupsPage = response.placementGroups;
    if (placementGroupsPage) {
      for (let i = 0; i < placementGroupsPage.length; i++) {
        // TODO: Change code below to process each resource in `placementGroupsPage`:
        console.log(JSON.stringify(placementGroupsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementGroups.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementGroups.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement strategy ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.placementStrategies.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement strategy ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementStrategies.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementStrategies.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.placementStrategies.list(request)).data;
    const placementStrategiesPage = response.placementStrategies;
    if (placementStrategiesPage) {
      for (let i = 0; i < placementStrategiesPage.length; i++) {
        // TODO: Change code below to process each resource in `placementStrategiesPage`:
        console.log(JSON.stringify(placementStrategiesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement strategy ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementStrategies.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placementStrategies.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placements.generatetags(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placements.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placements.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.placements.list(request)).data;
    const placementsPage = response.placements;
    if (placementsPage) {
      for (let i = 0; i < placementsPage.length; i++) {
        // TODO: Change code below to process each resource in `placementsPage`:
        console.log(JSON.stringify(placementsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placements.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.placements.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Platform type ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.platformTypes.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.platformTypes.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Postal code ID.
    code: 'my-code',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.postalCodes.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.postalCodes.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.projects.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.projects.list(request)).data;
    const projectsPage = response.projects;
    if (projectsPage) {
      for (let i = 0; i < projectsPage.length; i++) {
        // TODO: Change code below to process each resource in `projectsPage`:
        console.log(JSON.stringify(projectsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.regions.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    remarketingListId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.remarketingListShares.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    remarketingListId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.remarketingListShares.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.remarketingListShares.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.remarketingLists.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.remarketingLists.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Select only remarketing lists owned by this advertiser.
    advertiserId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.remarketingLists.list(request)).data;
    const remarketingListsPage = response.remarketingLists;
    if (remarketingListsPage) {
      for (let i = 0; i < remarketingListsPage.length; i++) {
        // TODO: Change code below to process each resource in `remarketingListsPage`:
        console.log(JSON.stringify(remarketingListsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.remarketingLists.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.remarketingLists.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.reports.compatibleFields.query(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.reports.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    // The ID of the report file.
    fileId: '0',  // TODO: Update placeholder value.

    // TODO: To download media content, use:
    //
    // alt: 'media',

    auth: authClient,
  };

  try {
    const response = (await dfareporting.reports.files.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the parent report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.reports.files.list(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.reports.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.reports.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.reports.list(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.reports.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.reports.run(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.reports.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Site ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.sites.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.sites.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.sites.list(request)).data;
    const sitesPage = response.sites;
    if (sitesPage) {
      for (let i = 0; i < sitesPage.length; i++) {
        // TODO: Change code below to process each resource in `sitesPage`:
        console.log(JSON.stringify(sitesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Site ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.sites.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.sites.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Size ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.sizes.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.sizes.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.sizes.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Subaccount ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.subaccounts.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.subaccounts.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.subaccounts.list(request)).data;
    const subaccountsPage = response.subaccounts;
    if (subaccountsPage) {
      for (let i = 0; i < subaccountsPage.length; i++) {
        // TODO: Change code below to process each resource in `subaccountsPage`:
        console.log(JSON.stringify(subaccountsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Subaccount ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.subaccounts.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.subaccounts.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.targetableRemarketingLists.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Select only targetable remarketing lists targetable by these advertisers.
    advertiserId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.targetableRemarketingLists.list(request)).data;
    const targetableRemarketingListsPage = response.targetableRemarketingLists;
    if (targetableRemarketingListsPage) {
      for (let i = 0; i < targetableRemarketingListsPage.length; i++) {
        // TODO: Change code below to process each resource in `targetableRemarketingListsPage`:
        console.log(JSON.stringify(targetableRemarketingListsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Targeting template ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.targetingTemplates.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.targetingTemplates.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.targetingTemplates.list(request)).data;
    const targetingTemplatesPage = response.targetingTemplates;
    if (targetingTemplatesPage) {
      for (let i = 0; i < targetingTemplatesPage.length; i++) {
        // TODO: Change code below to process each resource in `targetingTemplatesPage`:
        console.log(JSON.stringify(targetingTemplatesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Targeting template ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.targetingTemplates.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.targetingTemplates.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // The user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userProfiles.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using one of the following scopes:
  //   'https://www.googleapis.com/auth/dfareporting'
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  try {
    const response = (await dfareporting.userProfiles.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using one of the following scopes:
  //   'https://www.googleapis.com/auth/dfareporting'
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role permission group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRolePermissionGroups.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRolePermissionGroups.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role permission ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRolePermissions.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRolePermissions.list(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await dfareporting.userRoles.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRoles.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRoles.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await dfareporting.userRoles.list(request)).data;
    const userRolesPage = response.userRoles;
    if (userRolesPage) {
      for (let i = 0; i < userRolesPage.length; i++) {
        // TODO: Change code below to process each resource in `userRolesPage`:
        console.log(JSON.stringify(userRolesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRoles.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const dfareporting = google.dfareporting('v2.6');

async function main () {
  const authClient = await authorize();
  const request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await dfareporting.userRoles.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  let authClient = null;

  if (authClient == null) {
    throw Error('authentication failed');
  }

  return authClient;
}
