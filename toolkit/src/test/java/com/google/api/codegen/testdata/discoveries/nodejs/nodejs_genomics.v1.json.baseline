
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.annotations.batchCreate(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.annotations.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the annotation to be deleted.
    annotationId: 'my-annotation-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await genomics.annotations.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the annotation to be retrieved.
    annotationId: 'my-annotation-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.annotations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.annotations.search(request)).data;
    const annotationsPage = response.annotations;
    if (annotationsPage) {
      for (let i = 0; i < annotationsPage.length; i++) {
        // TODO: Change code below to process each resource in `annotationsPage`:
        console.log(JSON.stringify(annotationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the annotation to be updated.
    annotationId: 'my-annotation-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.annotations.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.annotationsets.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the annotation set to be deleted.
    annotationSetId: 'my-annotation-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await genomics.annotationsets.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the annotation set to be retrieved.
    annotationSetId: 'my-annotation-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.annotationsets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.annotationsets.search(request)).data;
    const annotationSetsPage = response.annotationSets;
    if (annotationSetsPage) {
      for (let i = 0; i < annotationSetsPage.length; i++) {
        // TODO: Change code below to process each resource in `annotationSetsPage`:
        console.log(JSON.stringify(annotationSetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the annotation set to be updated.
    annotationSetId: 'my-annotation-set-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.annotationsets.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.callsets.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the call set to be deleted.
    callSetId: 'my-call-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await genomics.callsets.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the call set.
    callSetId: 'my-call-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.callsets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the call set to be updated.
    callSetId: 'my-call-set-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.callsets.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.callsets.search(request)).data;
    const callSetsPage = response.callSets;
    if (callSetsPage) {
      for (let i = 0; i < callSetsPage.length; i++) {
        // TODO: Change code below to process each resource in `callSetsPage`:
        console.log(JSON.stringify(callSetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.datasets.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the dataset to be deleted.
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await genomics.datasets.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the dataset.
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.datasets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
    resource_: 'datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.datasets.getIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await genomics.datasets.list(request)).data;
    const datasetsPage = response.datasets;
    if (datasetsPage) {
      for (let i = 0; i < datasetsPage.length; i++) {
        // TODO: Change code below to process each resource in `datasetsPage`:
        console.log(JSON.stringify(datasetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the dataset to be updated.
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.datasets.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
    resource_: 'datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.datasets.setIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
    resource_: 'datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.datasets.testIamPermissions(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the dataset to be undeleted.
    datasetId: 'my-dataset-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.datasets.undelete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the operation resource to be cancelled.
    name: 'operations/my-operation',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    await genomics.operations.cancel(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the operation resource.
    name: 'operations/my-operation',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.operations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the operation collection.
    name: 'operations',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await genomics.operations.list(request)).data;
    const operationsPage = response.operations;
    if (operationsPage) {
      for (let i = 0; i < operationsPage.length; i++) {
        // TODO: Change code below to process each resource in `operationsPage`:
        console.log(JSON.stringify(operationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Required. The ID of the read group set over which coverage is requested.
    readGroupSetId: 'my-read-group-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await genomics.readgroupsets.coveragebuckets.list(request)).data;
    const coverageBucketsPage = response.coverageBuckets;
    if (coverageBucketsPage) {
      for (let i = 0; i < coverageBucketsPage.length; i++) {
        // TODO: Change code below to process each resource in `coverageBucketsPage`:
        console.log(JSON.stringify(coverageBucketsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the read group set to be deleted. The caller must have WRITE permissions to the dataset
    // associated with this read group set.
    readGroupSetId: 'my-read-group-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await genomics.readgroupsets.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Required. The ID of the read group set to export. The caller must have READ access to this read
    // group set.
    readGroupSetId: 'my-read-group-set-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.readgroupsets.export(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the read group set.
    readGroupSetId: 'my-read-group-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.readgroupsets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.readgroupsets.import(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the read group set to be updated. The caller must have WRITE permissions to the dataset
    // associated with this read group set.
    readGroupSetId: 'my-read-group-set-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.readgroupsets.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.readgroupsets.search(request)).data;
    const readGroupSetsPage = response.readGroupSets;
    if (readGroupSetsPage) {
      for (let i = 0; i < readGroupSetsPage.length; i++) {
        // TODO: Change code below to process each resource in `readGroupSetsPage`:
        console.log(JSON.stringify(readGroupSetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.reads.search(request)).data;
    const alignmentsPage = response.alignments;
    if (alignmentsPage) {
      for (let i = 0; i < alignmentsPage.length; i++) {
        // TODO: Change code below to process each resource in `alignmentsPage`:
        console.log(JSON.stringify(alignmentsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.reads.stream(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the reference.
    referenceId: 'my-reference-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await genomics.references.bases.list(request)).data;
    const sequencePage = response.sequence;
    if (sequencePage) {
      for (let i = 0; i < sequencePage.length; i++) {
        // TODO: Change code below to process each resource in `sequencePage`:
        console.log(JSON.stringify(sequencePage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the reference.
    referenceId: 'my-reference-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.references.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.references.search(request)).data;
    const referencesPage = response.references;
    if (referencesPage) {
      for (let i = 0; i < referencesPage.length; i++) {
        // TODO: Change code below to process each resource in `referencesPage`:
        console.log(JSON.stringify(referencesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the reference set.
    referenceSetId: 'my-reference-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.referencesets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.referencesets.search(request)).data;
    const referenceSetsPage = response.referenceSets;
    if (referenceSetsPage) {
      for (let i = 0; i < referenceSetsPage.length; i++) {
        // TODO: Change code below to process each resource in `referenceSetsPage`:
        console.log(JSON.stringify(referenceSetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.variants.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the variant to be deleted.
    variantId: 'my-variant-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await genomics.variants.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the variant.
    variantId: 'my-variant-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.variants.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.variants.import(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    await genomics.variants.merge(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the variant to be updated.
    variantId: 'my-variant-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.variants.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.variants.search(request)).data;
    const variantsPage = response.variants;
    if (variantsPage) {
      for (let i = 0; i < variantsPage.length; i++) {
        // TODO: Change code below to process each resource in `variantsPage`:
        console.log(JSON.stringify(variantsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.variants.stream(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.variantsets.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the variant set to be deleted.
    variantSetId: 'my-variant-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await genomics.variantsets.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Required. The ID of the variant set that contains variant data which should be exported. The caller
    // must have READ access to this variant set.
    variantSetId: 'my-variant-set-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.variantsets.export(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Required. The ID of the variant set.
    variantSetId: 'my-variant-set-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await genomics.variantsets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The ID of the variant to be updated (must already exist).
    variantSetId: 'my-variant-set-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await genomics.variantsets.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Genomics API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/genomics
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const genomics = google.genomics('v1');

async function main () {
  const authClient = await authorize();
  const request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
    }
    response = (await genomics.variantsets.search(request)).data;
    const variantSetsPage = response.variantSets;
    if (variantSetsPage) {
      for (let i = 0; i < variantSetsPage.length; i++) {
        // TODO: Change code below to process each resource in `variantSetsPage`:
        console.log(JSON.stringify(variantSetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
