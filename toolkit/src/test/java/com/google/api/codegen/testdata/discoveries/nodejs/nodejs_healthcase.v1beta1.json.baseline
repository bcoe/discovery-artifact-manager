
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the project in which the dataset should be created (e.g.,
    // `projects/{project_id}/locations/{location_id}`).
    parent: 'projects/my-project/locations/my-location',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Source dataset resource name. (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
    sourceDataset: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.deidentify(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the dataset to delete (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
    name: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the dataset this DICOM store belongs to.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the DICOM store to delete.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.dicomStores.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The DICOM store resource name from which the data should be exported (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.export(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the DICOM store to get.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.getIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store resource into which the data is imported (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.import(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the dataset.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await healthcare.projects.locations.datasets.dicomStores.list(request)).data;
    const dicomStoresPage = response.dicomStores;
    if (dicomStoresPage) {
      for (let i = 0; i < dicomStoresPage.length; i++) {
        // TODO: Change code below to process each resource in `dicomStoresPage`:
        console.log(JSON.stringify(dicomStoresPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Output only. Resource name of the DICOM store, of the form
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `instances`).
    dicomWebPath: 'instances',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.searchForInstances(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `series`).
    dicomWebPath: 'series',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.searchForSeries(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies`).
    dicomWebPath: 'studies',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.searchForStudies(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.setIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    dicomWebPath: 'studies',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.storeInstances(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    dicomWebPath: 'studies/my-study',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.dicomStores.studies.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/metadata`.
    dicomWebPath: 'studies/my-study/metadata',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    dicomWebPath: 'studies/my-study',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `instances`).
    dicomWebPath: 'studies/my-study/instances',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `series`).
    dicomWebPath: 'studies/my-study/series',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
    dicomWebPath: 'studies/my-study/series/my-sery',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.dicomStores.studies.series.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instances/{instance_id}`).
    dicomWebPath: 'studies/my-study/series/my-sery/instances/my-instance',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).
    dicomWebPath: 'studies/my-study/series/my-sery/instances/my-instance/frames/my-frame',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).
    dicomWebPath: 'studies/my-study/series/my-sery/instances/my-instance/frames/my-frame/rendered',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}`).
    dicomWebPath: 'studies/my-study/series/my-sery/instances/my-instance',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).
    dicomWebPath: 'studies/my-study/series/my-sery/instances/my-instance/metadata',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).
    dicomWebPath: 'studies/my-study/series/my-sery/instances/my-instance/rendered',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.
    dicomWebPath: 'studies/my-study/series/my-sery/metadata',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).
    dicomWebPath: 'studies/my-study/series/my-sery',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g.,
    // `instances`).
    dicomWebPath: 'studies/my-study/series/my-sery/instances',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the DICOM store that is being accessed (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    // The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or
    // QIDO-RS standard (e.g., `studies/{study_id}`).
    dicomWebPath: 'studies/my-study',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.studies.storeInstances(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset/dicomStores/my-dicom-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.dicomStores.testIamPermissions(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the dataset this FHIR store belongs to.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the FHIR store to delete.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.fhirStores.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the FHIR store to export resource from. The name should be in
    // the format of
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.export(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the FHIR store to retrieve resources from.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.observationLastn(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the `Patient` resource for which the information is required.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.patientEverything(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the resource to purge.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.fhirStores.fhir.resourcePurge(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the FHIR store to retrieve the capabilities for.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.capabilities(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the FHIR store this resource belongs to.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    // The type of the resource to delete.
    type: 'my-type',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.fhirStores.fhir.conditionalDelete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the FHIR store this resource belongs to.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    // The type of the resource to update.
    type: 'my-type',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.conditionalPatch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the FHIR store this resource belongs to.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    // The type of the resource to update.
    type: 'my-type',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.conditionalUpdate(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the FHIR store this resource belongs to.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    // The type of the resource to create.
    type: 'my-type',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the resource to delete.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.delete(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the FHIR store in which this bundle will be executed.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the resource to retrieve.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.history(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the resource to update.
    name: 'my-name',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the resource to retrieve.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.read(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the FHIR store to retrieve resources from.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.search(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the resource to update.
    name: 'my-name',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.update(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the resource version to retrieve.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.fhir.vread(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the FHIR store to get.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.getIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the FHIR store to import FHIR resources to. The name should be
    // in the format of
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.import(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the dataset.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await healthcare.projects.locations.datasets.fhirStores.list(request)).data;
    const fhirStoresPage = response.fhirStores;
    if (fhirStoresPage) {
      for (let i = 0; i < fhirStoresPage.length; i++) {
        // TODO: Change code below to process each resource in `fhirStoresPage`:
        console.log(JSON.stringify(fhirStoresPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Output only. Resource name of the FHIR store, of the form
    // `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.setIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset/fhirStores/my-fhir-store',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.fhirStores.testIamPermissions(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the dataset to read (e.g.,
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).
    name: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.getIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the dataset this HL7v2 store belongs to.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the HL7v2 store to delete.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.hl7V2Stores.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the HL7v2 store to get.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'my-resource',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the dataset.
    parent: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await healthcare.projects.locations.datasets.hl7V2Stores.list(request)).data;
    const hl7V2StoresPage = response.hl7V2Stores;
    if (hl7V2StoresPage) {
      for (let i = 0; i < hl7V2StoresPage.length; i++) {
        // TODO: Change code below to process each resource in `hl7V2StoresPage`:
        console.log(JSON.stringify(hl7V2StoresPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the dataset this message belongs to.
    parent: 'my-parent',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.messages.create(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the HL7v2 message to delete.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    await healthcare.projects.locations.datasets.hl7V2Stores.messages.delete(request);
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource name of the HL7v2 message to retrieve.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.messages.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the HL7v2 store this message belongs to.
    parent: 'my-parent',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the HL7v2 store to retrieve messages from.
    parent: 'my-parent',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await healthcare.projects.locations.datasets.hl7V2Stores.messages.list(request)).data;
    const messagesPage = response.messages;
    if (messagesPage) {
      for (let i = 0; i < messagesPage.length; i++) {
        // TODO: Change code below to process each resource in `messagesPage`:
        console.log(JSON.stringify(messagesPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Resource name of the Message, of the form
    // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.
    // Assigned by the server.
    name: 'my-name',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.messages.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Output only. Resource name of the HL7v2 store, of the form
    // `projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.
    name: 'my-name',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'my-resource',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'my-resource',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the project whose datasets should be listed (e.g.,
    // `projects/{project_id}/locations/{location_id}`).
    parent: 'projects/my-project/locations/my-location',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await healthcare.projects.locations.datasets.list(request)).data;
    const datasetsPage = response.datasets;
    if (datasetsPage) {
      for (let i = 0; i < datasetsPage.length; i++) {
        // TODO: Change code below to process each resource in `datasetsPage`:
        console.log(JSON.stringify(datasetsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the operation resource.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset/operations/my-operation',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.operations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The name of the operation's parent resource.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await healthcare.projects.locations.datasets.operations.list(request)).data;
    const operationsPage = response.operations;
    if (operationsPage) {
      for (let i = 0; i < operationsPage.length; i++) {
        // TODO: Change code below to process each resource in `operationsPage`:
        console.log(JSON.stringify(operationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Output only. Resource name of the dataset, of the form
    // `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.
    name: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.patch(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy is being specified.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.setIamPolicy(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // REQUIRED: The resource for which the policy detail is being requested.
    // See the operation documentation for the appropriate value for this field.
    resource_: 'projects/my-project/locations/my-location/datasets/my-dataset',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.datasets.testIamPermissions(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Resource name for the location.
    name: 'projects/my-project/locations/my-location',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await healthcare.projects.locations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Healthcare API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/healthcare
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const healthcare = google.healthcare('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The resource that owns the locations collection, if applicable.
    name: 'projects/my-project',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await healthcare.projects.locations.list(request)).data;
    const locationsPage = response.locations;
    if (locationsPage) {
      for (let i = 0; i < locationsPage.length; i++) {
        // TODO: Change code below to process each resource in `locationsPage`:
        console.log(JSON.stringify(locationsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
