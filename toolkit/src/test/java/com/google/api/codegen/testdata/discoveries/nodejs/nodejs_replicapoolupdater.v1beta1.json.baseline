
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the update.
    rollingUpdate: 'my-rolling-update',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await replicapoolupdater.rollingUpdates.cancel(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the update.
    rollingUpdate: 'my-rolling-update',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await replicapoolupdater.rollingUpdates.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  try {
    const response = (await replicapoolupdater.rollingUpdates.insert(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await replicapoolupdater.rollingUpdates.list(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the update.
    rollingUpdate: 'my-rolling-update',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await replicapoolupdater.rollingUpdates.listInstanceUpdates(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the update.
    rollingUpdate: 'my-rolling-update',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await replicapoolupdater.rollingUpdates.pause(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the update.
    rollingUpdate: 'my-rolling-update',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await replicapoolupdater.rollingUpdates.resume(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // The Google Developers Console project name.
    project: 'my-project',  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the update.
    rollingUpdate: 'my-rolling-update',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await replicapoolupdater.rollingUpdates.rollback(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the project scoping this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // Name of the zone scoping this request.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // Name of the operation resource to return.
    operation: 'my-operation',  // TODO: Update placeholder value.

    auth: authClient,
  };

  try {
    const response = (await replicapoolupdater.zoneOperations.get(request)).data;
    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  } catch (err) {
    console.error(err);
  }
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

const {google} = require('googleapis');
const replicapoolupdater = google.replicapoolupdater('v1beta1');

async function main () {
  const authClient = await authorize();
  const request = {
    // Name of the project scoping this request.
    project: 'my-project',  // TODO: Update placeholder value.

    // Name of the zone scoping this request.
    zone: 'my-zone',  // TODO: Update placeholder value.

    auth: authClient,
  };

  let response;
  do {
    if (response && response.nextPageToken) {
      request.pageToken = response.nextPageToken;
    }
    response = (await replicapoolupdater.zoneOperations.list(request)).data;
    const itemsPage = response.items;
    if (itemsPage) {
      for (let i = 0; i < itemsPage.length; i++) {
        // TODO: Change code below to process each resource in `itemsPage`:
        console.log(JSON.stringify(itemsPage[i], null, 2));
      }
    }
  } while (response.nextPageToken);
}
main();

async function authorize() {
  const auth = new google.auth.GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/cloud-platform']
  });
  return await auth.getClient();
}
